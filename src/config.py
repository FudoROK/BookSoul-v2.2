import os
import sys
from dataclasses import dataclass
from dotenv import load_dotenv

print("‚öôÔ∏è config.py LOADED")

# === 1. –ü—É—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∏ .env ===
CURRENT_DIR = os.path.dirname(os.path.abspath(__file__))      # .../src
PROJECT_ROOT = os.path.dirname(CURRENT_DIR)                    # –∫–æ—Ä–µ–Ω—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
if PROJECT_ROOT not in sys.path:
    sys.path.insert(0, PROJECT_ROOT)

ENV_PATH = os.path.join(PROJECT_ROOT, ".env")

# .env –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ. –í Cloud Run –µ–≥–æ –Ω–µ—Ç ‚Äî —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ.
if os.path.exists(ENV_PATH):
    load_dotenv(ENV_PATH)
else:
    print(f"‚ö† –í–ù–ò–ú–ê–ù–ò–ï: .env –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ {ENV_PATH} (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è Cloud Run)")

# === 2. Settings ‚Äî –µ–¥–∏–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–∞–≤–¥—ã –¥–ª—è –≤—Å–µ–π —Ñ–∞–±—Ä–∏–∫–∏ BookSoul ===
@dataclass
class Settings:
    # --- Google / Firestore ---
    gcp_project_id: str
    firestore_collection_books: str
    gcs_bucket: str

    # --- Google Sheets –ø–∞–Ω–µ–ª—å –∫–æ–Ω—Ç—Ä–æ–ª—è ---
    sheets_id: str

    # --- OpenAI ---
    openai_api_key: str
    openai_model_name: str

    # --- Gemini (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ---
    gemini_api_key: str

    # --- Telegram –±–æ—Ç ---
    telegram_bot_token: str

    # --- PDF / –≤–µ—Ä—Å—Ç–∫–∞ ---
    reportlab_font: str

    def ensure_env_ready(self):
        """–ì–æ—Ç–æ–≤–∏–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è SDK."""
        if self.gcp_project_id:
            os.environ["GOOGLE_CLOUD_PROJECT"] = self.gcp_project_id

        # –ë–æ–ª—å—à–µ –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º GOOGLE_APPLICATION_CREDENTIALS
        # Cloud Run –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Application Default Credentials (ADC)

        if self.openai_api_key:
            os.environ["OPENAI_API_KEY"] = self.openai_api_key

        print("üîπ SETTINGS INITIALIZED")
        print(f"   GOOGLE_CLOUD_PROJECT set: {bool(self.gcp_project_id)}")
        print("   GOOGLE_APPLICATION_CREDENTIALS set: False (ADC mode)")
        print(f"   OPENAI_API_KEY loaded: {bool(self.openai_api_key)}")
        print(f"   TELEGRAM_BOT_TOKEN loaded: {bool(self.telegram_bot_token)}")
        print(f"   SHEETS_ID present: {bool(self.sheets_id)}")
        print(f"   OPENAI_MODEL_NAME: {self.openai_model_name}")


def build_settings() -> Settings:
    """–°–±–æ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–ª–æ–∫–∞–ª—å–Ω–æ ‚Äî –∏–∑ .env, –≤ Cloud Run ‚Äî –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)."""
    return Settings(
        # --- GOOGLE / FIRESTORE ---
        gcp_project_id=os.getenv("GCP_PROJECT_ID", os.getenv("GOOGLE_PROJECT_ID", "")),
        firestore_collection_books=os.getenv("FIRESTORE_COLLECTION", "books"),
        gcs_bucket=os.getenv("GCS_BUCKET", ""),

        # --- SHEETS ---
        sheets_id=os.getenv("SHEETS_ID", ""),

        # --- OPENAI ---
        openai_api_key=os.getenv("OPENAI_API_KEY", ""),
        openai_model_name=os.getenv("OPENAI_MODEL_NAME", "gpt-5-pro"),

        # --- GEMINI ---
        gemini_api_key=os.getenv("GEMINI_API_KEY", ""),

        # --- TELEGRAM ---
        telegram_bot_token=os.getenv("TELEGRAM_BOT_TOKEN", ""),

        # --- REPORTLAB ---
        reportlab_font=os.getenv("REPORTLAB_FONT", "HeiseiMin-W3"),
    )


# 3. —Å–æ–∑–¥–∞—ë–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫
settings = build_settings()

# 4. –ø—Ä–æ–≥—Ä–µ–≤–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
settings.ensure_env_ready()
