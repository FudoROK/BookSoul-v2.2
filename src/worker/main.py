# src/worker/main.py
from fastapi import FastAPI
from google.cloud import firestore
from datetime import datetime, timezone
import httpx, os
from openai import OpenAI

app = FastAPI()
db = firestore.Client()

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")


@app.get("/")
def health():
    return {"status": "ok", "service": "booksoul-worker"}


@app.get("/tick")
def tick():
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫:
    1) –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–æ ¬´–ª–∏–∑—É–µ—Ç¬ª pending-–∑–∞–¥–∞—á–∏ (status -> processing)
    2) –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –±—ã—Å—Ç—Ä—ã–π –±–∞–Ω–Ω–µ—Ä-ACK
    3) –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç —É GPT –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ
    4) –ü–æ–º–µ—á–∞–µ—Ç –∑–∞–¥–∞—á—É –∫–∞–∫ done
    """
    now = datetime.now(timezone.utc)
    processed = 0

    # 1) –õ–∏–∑–∏–Ω–≥ –∑–∞–¥–∞—á (–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è Firestore)
    jobs = lease_pending_jobs(db, limit=3)

    for job in jobs:
        doc_id = job["id"]
        chat_id = job.get("chat_id")
        text = job.get("user_text", "")

        try:
            # 2) –±—ã—Å—Ç—Ä—ã–π —Ñ–∏—Ä–º–µ–Ω–Ω—ã–π –æ—Ç–∫–ª–∏–∫-–±–∞–Ω–Ω–µ—Ä
            if chat_id:
                send_message(chat_id, "üìñ ùóïùóºùóºùó∏ùó¶ùóºùòÇùóπ ¬∑ AI Soul Factory üåø")

            # 3) –º—è–≥–∫–∏–π –æ—Ç–≤–µ—Ç GPT
            if text and chat_id:
                gpt_reply = generate_reply(text)
                if gpt_reply:
                    send_message(chat_id, gpt_reply)

            # 4) —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è: status -> done
            try:
                db.collection("jobs_inbox").document(doc_id).update({
                    "status": "done",
                    "updated_at": firestore.SERVER_TIMESTAMP,
                })
            except Exception as e_upd:
                print(f"finalize error [{doc_id}]: {e_upd}")

            processed += 1

        except Exception as e:
            print(f"job error [{doc_id}]: {e}")

    return {"processed_jobs": processed, "time": now.isoformat()}


def lease_pending_jobs(db_client: firestore.Client, limit: int = 3):
    """
    –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–æ ¬´–±—Ä–æ–Ω–∏—Ä—É–µ–º¬ª pending-–∑–∞–¥–∞—á–∏:
    - —á–∏—Ç–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —Å–æ status='pending'
    - –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—ã—Ç–∞–µ–º—Å—è –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ 'processing'
    - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω–æ ¬´–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ¬ª –∑–∞–¥–∞—á–∏
    """
    leased = []
    try:
        candidates = (
            db_client.collection("jobs_inbox")
            .where("status", "==", "pending")
            .limit(limit)
            .stream()
        )
    except Exception as e_query:
        print("lease query error:", e_query)
        return leased

    for snap in candidates:
        doc_ref = snap.reference
        tx = db_client.transaction()

        @firestore.transactional
        def _lease(transaction, ref):
            # –ß–∏—Ç–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤–Ω—É—Ç—Ä–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            current = ref.get(transaction=transaction)
            data = current.to_dict() or {}
            if data.get("status") == "pending":
                # –°—Ç–∞–≤–∏–º ¬´processing¬ª –∞—Ç–æ–º–∞—Ä–Ω–æ
                transaction.update(ref, {
                    "status": "processing",
                    "updated_at": firestore.SERVER_TIMESTAMP,
                })
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–Ω–∏–º–æ–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                return {"id": ref.id, **data}
            return None

        try:
            result = _lease(tx, doc_ref)
            if result:
                leased.append(result)
        except Exception as e_tx:
            print("Lease transaction failed:", e_tx)

    return leased


def send_message(chat_id: int, text: str):
    if not TELEGRAM_BOT_TOKEN:
        print("‚ùå TELEGRAM_BOT_TOKEN not set")
        return
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    data = {"chat_id": chat_id, "text": text}
    try:
        with httpx.Client(timeout=15) as client:
            client.post(url, data=data)
        print(f"‚úÖ Sent to {chat_id}")
    except Exception as e:
        print(f"send_message error: {e}")


def get_openai_client() -> OpenAI | None:
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        print("‚ÑπÔ∏è OPENAI_API_KEY is not set ‚Äî skipping GPT call")
        return None
    try:
        return OpenAI(api_key=api_key)
    except Exception as e:
        print("OpenAI init error:", e)
        return None


def generate_reply(prompt: str) -> str | None:
    client_ai = get_openai_client()
    if client_ai is None:
        # –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π fallback, –µ—Å–ª–∏ –∫–ª—é—á–∞ –Ω–µ—Ç
        return "–Ø –ø—Ä–∏–Ω—è–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –í–µ—Ä–Ω—É—Å—å —Å –æ—Ç–≤–µ—Ç–æ–º —á—É—Ç—å –ø–æ–∑–∂–µ. ‚ú®"

    try:
        completion = client_ai.responses.create(
            model="gpt-5",
            input=f"User said: {prompt}\n\nAnswer as BookSoul: be clear, kind, short.",
        )
        # –≤ Responses API —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–∫–∞—è: output[...].content[...].text
        message = completion.output[0].content[0].text
        return message.strip()
    except Exception as e:
        print("GPT error:", e)
        return "–í–µ–¥—É –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ. ü§ñ"
