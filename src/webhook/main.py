# src/webhook/main.py

import os
import sys
import asyncio
from datetime import datetime, timezone
from fastapi import FastAPI, Request
import httpx

# === –ü–†–ê–í–ò–õ–¨–ù–´–ï –ü–£–¢–ò ===
CURRENT_DIR = os.path.dirname(os.path.abspath(__file__))      # .../src/webhook
SRC_DIR = os.path.dirname(CURRENT_DIR)                         # .../src
PROJECT_ROOT = os.path.dirname(SRC_DIR)                        # .../
if SRC_DIR not in sys.path:
    sys.path.insert(0, SRC_DIR)
if PROJECT_ROOT not in sys.path:
    sys.path.insert(0, PROJECT_ROOT)

# --- –Ω–∞—à–∏ –º–æ–¥—É–ª–∏ ---
from config import settings
from router.assistant_openai import handle_user_message  # –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç = –º–æ–∑–≥ —Ñ–∞–±—Ä–∏–∫–∏

# === Firestore –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
# –ü–æ –Ω–∞—à–µ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ: —Ü–µ—Ö–∞ –Ω–µ —Ç—Ä–æ–≥–∞—é—Ç –±–∞–∑—É.
# –í–µ–±—Ö—É–∫ —Ç–æ–ª—å–∫–æ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å –∫–∞–∫ job,
# —á—Ç–æ–±—ã —Ñ–∞–±—Ä–∏–∫–∞ –∑–Ω–∞–ª–∞, —á—Ç–æ —Ä–æ–¥–∏—Ç–µ–ª—å —á—Ç–æ-—Ç–æ –ø–æ–ø—Ä–æ—Å–∏–ª.
try:
    import firebase_admin
    from firebase_admin import credentials, firestore

    if not firebase_admin._apps:
        # –ë–µ–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ JSON-–∫–ª—é—á–∞.
        # Cloud Run —Å–∞–º –¥–∞—ë—Ç –∫—Ä–µ–¥—ã —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
        cred = credentials.ApplicationDefault()
        firebase_admin.initialize_app(cred, {
            "projectId": settings.gcp_project_id
        })

    db = firestore.client()
    print("‚úÖ Firestore initialized with ApplicationDefault()")
except Exception as e:
    print("‚ùå Firestore init failed:", e)
    db = None



app = FastAPI()

TELEGRAM_API_BASE = f"https://api.telegram.org/bot{settings.telegram_bot_token}"


async def send_message(chat_id: int, text: str):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ–±—Ä–∞—Ç–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Telegram.
    """
    async with httpx.AsyncClient(timeout=10.0) as client:
        await client.post(
            f"{TELEGRAM_API_BASE}/sendMessage",
            json={
                "chat_id": chat_id,
                "text": text,
                "parse_mode": "HTML"
            }
        )


async def call_brain(user_text: str) -> str:
    """
    –û–±—ë—Ä—Ç–∫–∞ –Ω–∞–¥ –º–æ–∑–≥–æ–º —Ñ–∞–±—Ä–∏–∫–∏ BookSoul.
    –í–Ω—É—Ç—Ä–∏ –¥–µ—Ä–≥–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ (GPT-5-pro),
    –∫–æ—Ç–æ—Ä—ã–π —Ä–µ—à–∞–µ—Ç, —á—Ç–æ —Å —ç—Ç–∏–º –¥–µ–ª–∞—Ç—å.
    """
    if asyncio.iscoroutinefunction(handle_user_message):
        # –µ—Å–ª–∏ –∫–æ–≥–¥–∞-—Ç–æ —Å–¥–µ–ª–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ async
        return await handle_user_message(user_text)

    # —Å–µ–π—á–∞—Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π
    loop = asyncio.get_running_loop()
    return await loop.run_in_executor(None, handle_user_message, user_text)


def create_job_in_firestore(chat_id: int, user_text: str):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Ä–æ–¥–∏—Ç–µ–ª—è –∫–∞–∫ job –≤ Firestore.
    –≠—Ç–æ –Ω–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–∏–≥–∏. –≠—Ç–æ —Ñ–∞–∫—Ç –∑–∞—è–≤–∫–∏.
    –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ—Ç–æ–º —É–∂–µ –±—É–¥–µ—Ç –¥–æ–ø–æ–ª–Ω—è—Ç—å —ç—Ç–æ—Ç job.
    """
    if db is None:
        print("‚ö† Firestore is not available, job not saved.")
        return None

    try:
        now = datetime.now(timezone.utc)
        job_doc = {
            "chat_id": chat_id,
            "user_text": user_text,
            "status": "awaiting_outline",  # –ø–µ—Ä–≤—ã–π —Å—Ç–∞—Ç—É—Å —Ü–µ–ø–æ—á–∫–∏
            "created_at": now.isoformat(),
            "updated_at": now.isoformat(),
        }
        ref = db.collection("jobs").add(job_doc)
        job_id = ref[1].id  # add() -> (write_result, reference)
        print(f"üìò Firestore job created: {job_id}")
        return job_id
    except Exception as e:
        print("‚ùå Firestore write failed:", e)
        return None


@app.post("/telegram_webhook")
async def telegram_webhook(request: Request):
    """
    –í—Ö–æ–¥–Ω–∞—è –¥–≤–µ—Ä—å. Telegram —à–ª—ë—Ç —Å—é–¥–∞ –∞–ø–¥–µ–π—Ç—ã.
    –ó–¥–µ—Å—å –º—ã:
    1. –ß–∏—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    2. –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å job –≤ Firestore
    3. –°–ø—Ä–∞—à–∏–≤–∞–µ–º –º–æ–∑–≥ (–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞)
    4. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç —á–µ–ª–æ–≤–µ–∫—É
    """
    data = await request.json()

    # 1. –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∞–ø–¥–µ–π—Ç–∞
    message = data.get("message", {})
    chat = message.get("chat", {})
    chat_id = chat.get("id")
    user_text = message.get("text", "")

    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç ‚Äî –Ω–µ –ª–æ–º–∞–µ–º—Å—è, –æ—Ç–≤–µ—á–∞–µ–º –º—è–≥–∫–æ
    if not user_text or chat_id is None:
        if chat_id is not None:
            await send_message(
                chat_id,
                "–Ø –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞. –ù–∞–ø–∏—à–∏ —Å–ª–æ–≤–∞–º–∏, –∫–∞–∫—É—é –∫–Ω–∏–≥—É –∏–ª–∏ –ø—Ä–∞–≤–∫—É —Ç—ã —Ö–æ—á–µ—à—å üìò"
            )
        return {"ok": True}

    # 2. –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –æ –∑–∞—è–≤–∫–µ –≤ Firestore
    job_id = create_job_in_firestore(chat_id, user_text)

    # 3. –î—ë—Ä–≥–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ ‚Äî –æ–Ω –¥—É–º–∞–µ—Ç, —É—Ç–æ—á–Ω—è–µ—Ç, –≥–µ–Ω–µ—Ä–∏—Ç, —Ä–µ—à–∞–µ—Ç
    try:
        reply_text = await call_brain(user_text)
    except Exception as e:
        print("‚ùå Assistant failed:", e)
        reply_text = (
            "–°–µ–π—á–∞—Å —Ñ–∞–±—Ä–∏–∫–∞ –Ω–µ —Å–º–æ–≥–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–¥–∞—á—É —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏. "
            "–¢–µ–∫—Å—Ç —è –Ω–µ –ø–æ—Ç–µ—Ä—è–ª. üåø"
        )

    # 4. –ï—Å–ª–∏ job_id –µ—Å—Ç—å, –¥–æ–±–∞–≤–∏–º –µ–≥–æ –≤ –æ—Ç–≤–µ—Ç (–ø—Ä–æ–∑—Ä–∞—á–Ω–æ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è)
    final_reply = reply_text
    if job_id:
        final_reply += f"\n\n(id –∑–∞—è–≤–∫–∏: {job_id})"

    # 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—é –≤ Telegram
    await send_message(chat_id, final_reply)

    # 6. Telegram –∂–¥—ë—Ç JSON {"ok": true}
    return {"ok": True}
