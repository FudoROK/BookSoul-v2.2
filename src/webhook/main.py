# src/webhook/main.py

import os
import sys
import asyncio
from fastapi import FastAPI, Request
import httpx

# === –ü–†–ê–í–ò–õ–¨–ù–´–ï –ü–£–¢–ò ===
# –ó–¥–µ—Å—å –º—ã –¥–µ–ª–∞–µ–º —Ç–æ –∂–µ —Å–∞–º–æ–µ, —á—Ç–æ —É —Ç–µ–±—è —Å–¥–µ–ª–∞–Ω–æ –≤ assistant_openai.py:
# –¥–æ–±–∞–≤–ª—è–µ–º –≤ sys.path –∏ —Å–∞–º—É –ø–∞–ø–∫—É src, –∏ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞.
CURRENT_DIR = os.path.dirname(os.path.abspath(__file__))      # .../src/webhook
SRC_DIR = os.path.dirname(CURRENT_DIR)                         # .../src
PROJECT_ROOT = os.path.dirname(SRC_DIR)                        # .../
if SRC_DIR not in sys.path:
    sys.path.insert(0, SRC_DIR)
if PROJECT_ROOT not in sys.path:
    sys.path.insert(0, PROJECT_ROOT)

# –¢–µ–ø–µ—Ä—å, –í–ê–ñ–ù–û:
# assistant_openai.py —Ñ–∏–∑–∏—á–µ—Å–∫–∏ –ª–µ–∂–∏—Ç –≤ src/router/assistant_openai.py
# –ó–Ω–∞—á–∏—Ç, –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è SRC_DIR –≤ sys.path –º—ã –º–æ–∂–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–∫:
# from router.assistant_openai import handle_user_message
from config import settings
from router.assistant_openai import handle_user_message


app = FastAPI()

TELEGRAM_API_BASE = f"https://api.telegram.org/bot{settings.telegram_bot_token}"


async def send_message(chat_id: int, text: str):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ–±—Ä–∞—Ç–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Telegram.
    –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ–π POST –Ω–∞ sendMessage.
    """
    async with httpx.AsyncClient(timeout=10.0) as client:
        await client.post(
            f"{TELEGRAM_API_BASE}/sendMessage",
            json={
                "chat_id": chat_id,
                "text": text,
                "parse_mode": "HTML"
            }
        )


async def call_brain(user_text: str) -> str:
    """
    –û–±—ë—Ä—Ç–∫–∞ –Ω–∞–¥ –º–æ–∑–≥–æ–º —Ñ–∞–±—Ä–∏–∫–∏ BookSoul.
    –ó–∞–±–∏—Ä–∞–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π —Ç–µ–∫—Å—Ç,
    –ø–µ—Ä–µ–¥–∞—ë–º –µ–≥–æ –≤ handle_user_message (–¥–∏—Ä–µ–∫—Ç–æ—Ä/–æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä),
    –ø–æ–ª—É—á–∞–µ–º —á–µ–ª–æ–≤–µ–∫–æ-–ø–æ–Ω—è—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç.
    """
    if asyncio.iscoroutinefunction(handle_user_message):
        # –±—É–¥—É—â–µ–µ: –µ—Å–ª–∏ –º—ã –ø–µ—Ä–µ–≤–µ–¥—ë–º –º–æ–∑–≥ –Ω–∞ async
        return await handle_user_message(user_text)

    # —Ç–µ–∫—É—â–µ–µ: handle_user_message —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π
    loop = asyncio.get_running_loop()
    return await loop.run_in_executor(None, handle_user_message, user_text)


@app.post("/telegram_webhook")
async def telegram_webhook(request: Request):
    """
    –≠—Ç–æ –≤—Ö–æ–¥–Ω–∞—è –¥–≤–µ—Ä—å. Telegram –±—É–¥–µ—Ç —Å—é–¥–∞ —Å—Ç—É—á–∞—Ç—å –∫–∞–∂–¥—ã–π —Ä–∞–∑,
    –∫–æ–≥–¥–∞ —Ç–µ–±–µ –∫—Ç–æ-—Ç–æ –ø–∏—à–µ—Ç –≤ –±–æ—Ç–∞.
    """
    data = await request.json()

    # 1. –î–æ—Å—Ç–∞—ë–º –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è –∏–∑ –∞–ø–¥–µ–π—Ç–∞
    message = data.get("message", {})
    chat = message.get("chat", {})
    chat_id = chat.get("id")
    user_text = message.get("text", "")

    # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ ‚Äî –æ—Ç–≤–µ—á–∞–µ–º –º—è–≥–∫–æ –∏ –±–µ–∑ –ø–∞–Ω–∏–∫–∏.
    if not user_text or chat_id is None:
        if chat_id is not None:
            await send_message(
                chat_id,
                "–Ø –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞. –ù–∞–ø–∏—à–∏ —Å–ª–æ–≤–∞–º–∏, –∫–∞–∫—É—é –∫–Ω–∏–≥—É –∏–ª–∏ –ø—Ä–∞–≤–∫—É —Ç—ã —Ö–æ—á–µ—à—å üìò"
            )
        return {"ok": True}

    # 2. –ì–æ–Ω–∏–º —Ç–µ–∫—Å—Ç –≤ –º–æ–∑–≥ (Orchestrator ‚Üí Router ‚Üí Firestore)
    try:
        reply_text = await call_brain(user_text)
    except Exception:
        # –ü–æ –Ω–∞—à–µ–º—É –ø—Ä–∞–≤–∏–ª—É:
        # –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–Ω–∞—á–∞–ª–∞ –æ–±—ä—è—Å–Ω—è–µ–º –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏,
        # –Ω–µ –ª–µ–∑–µ–º —á–∏–Ω–∏—Ç—å —Å–∞–º–∏, –∂–¥—ë–º —Ç–≤–æ–∏—Ö —É–∫–∞–∑–∞–Ω–∏–π.
        reply_text = (
            "–°–µ–π—á–∞—Å —Ñ–∞–±—Ä–∏–∫–∞ –Ω–µ —Å–º–æ–≥–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–¥–∞—á—É —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏. "
            "–¢–µ–∫—Å—Ç —è –Ω–µ –ø–æ—Ç–µ—Ä—è–ª. üåø"
        )

    # 3. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á–µ–ª–æ–≤–µ–∫—É –æ—Ç–≤–µ—Ç
    await send_message(chat_id, reply_text)

    # 4. –ì–æ–≤–æ—Ä–∏–º –¢–µ–ª–µ–≥—Ä–∞–º—É '–æ–∫'
    return {"ok": True}
