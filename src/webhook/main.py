# src/webhook/main.py
# BookSoul Webhook ‚Äî –ø–æ–ª–Ω—ã–π –º–µ–π–Ω:
# 1) –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω—ã–π –ø—Ä–∏–µ–º –∞–ø–¥–µ–π—Ç–∞ (inbox) + –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π 200 OK
# 2) –ñ—É—Ä–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π (events): incoming_message, router_start, router_sent
# 3) –ë–∞–Ω–Ω–µ—Ä –Ω–∞ –ü–ï–†–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Ç–∞ (–æ–¥–∏–Ω —Ä–∞–∑), –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
# 4) –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç‚Ä¶" (typing) –Ω–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è
# 5) –í—ã–∑–æ–≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ (GPT-5) –Ω–∞ –ö–ê–ñ–î–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—Ç –≤ Telegram
# 6) outbox-–¥–µ–¥—É–ø –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ –∫–ª—é—á—É <chat_id>:<update_id>
# 7) DEBUG_ROUTER=true ‚Äî —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ª–æ–≥–∏ –≤–æ–∫—Ä—É–≥ –≤—ã–∑–æ–≤–∞ –º–æ–¥–µ–ª–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram

from __future__ import annotations
import os
import time
import asyncio
from datetime import datetime, timezone

from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse

from google.cloud import firestore

# --- –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ HTTP-–≤—ã–∑–æ–≤—ã –∫ Telegram ---
try:
    import httpx
except Exception:
    httpx = None

# --- –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç OpenAI (–¥–≤–æ–π–Ω–æ–π fallback) ---
try:
    from openai import OpenAI
except Exception:
    OpenAI = None

app = FastAPI()
db = firestore.Client()  # ADC: Cloud Run –ø–æ–¥—Ç—è–Ω–µ—Ç —Å–µ—Ä–≤–∏—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç

# ------------ ENV –ù–ê–°–¢–†–û–ô–ö–ò ------------
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "")
TELEGRAM_API = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}" if TELEGRAM_BOT_TOKEN else ""

# –ë–∞–Ω–Ω–µ—Ä –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤–∫–ª—é—á–∞–µ—Ç—Å—è –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ –Ω–∞ —á–∞—Ç
SEND_ACK_BANNER = os.getenv("SEND_ACK_BANNER", "true").lower() == "true"

# –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç‚Ä¶" (typing)
TYPING_FEEDBACK = os.getenv("TYPING_FEEDBACK", "true").lower() == "true"
TYPING_DURATION_SEC = int(os.getenv("TYPING_DURATION_SEC", "8"))

# OpenAI
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-5-pro")  # –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –≤ ENV

SYSTEM_PROMPT = (
    "You are the Director of BookSoul Factory. "
    "Answer the user briefly, helpfully, and specifically about making a custom children's book. "
    "If info is missing, ask one clear follow-up question. "
    "Avoid small talk. Keep it practical."
)

# Debug-—Ñ–ª–∞–≥ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
DEBUG_ROUTER = os.getenv("DEBUG_ROUTER", "false").lower() == "true"

def _dlog(*args):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–µ—á–∞—Ç–Ω—ã–π –ª–æ–≥ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ DEBUG_ROUTER=true (—Å–µ–∫—Ä–µ—Ç—ã –Ω–µ –ª–æ–≥–∏—Ä—É–µ–º)."""
    if DEBUG_ROUTER:
        try:
            print("[router]", *args)
        except Exception:
            pass

# ----------------------------------------


@app.get("/")
def health():
    return {"status": "ok", "service": "booksoul-webhook2"}


# =============== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===============

async def _tg_send_text(chat_id: int, text: str):
    if not (TELEGRAM_API and httpx):
        _dlog("telegram send skipped:", {"has_api": bool(TELEGRAM_API), "has_httpx": bool(httpx)})
        return
    async with httpx.AsyncClient(timeout=15) as client:
        r = await client.post(f"{TELEGRAM_API}/sendMessage", data={
            "chat_id": chat_id,
            "text": text,
            "parse_mode": "HTML",
            "disable_web_page_preview": True,
        })
        _dlog("telegram send status", r.status_code)
        r.raise_for_status()


async def _tg_send_typing(chat_id: int):
    if not (TYPING_FEEDBACK and TELEGRAM_API and httpx):
        _dlog("typing skipped:", {"TYPING_FEEDBACK": TYPING_FEEDBACK, "has_api": bool(TELEGRAM_API), "has_httpx": bool(httpx)})
        return
    try:
        async with httpx.AsyncClient(timeout=10) as client:
            r = await client.post(f"{TELEGRAM_API}/sendChatAction", data={
                "chat_id": chat_id,
                "action": "typing"
            })
            _dlog("typing status", r.status_code)
    except Exception as e:
        print("typing action error:", e)


async def _typing_loop(chat_id: int, seconds: int):
    remaining = max(0, seconds)
    while remaining > 0:
        await _tg_send_typing(chat_id)
        await asyncio.sleep(4)  # —ç—Ñ—Ñ–µ–∫—Ç –¥–µ—Ä–∂–∏—Ç—Å—è ~5—Å, –ø—É–ª—å—Å–∏—Ä—É–µ–º —Ä–∞–∑ –≤ ~4—Å
        remaining -= 4


async def _send_banner_once(chat_id: int) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –±–∞–Ω–Ω–µ—Ä —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑ –Ω–∞ —á–∞—Ç (—á/–∑ –∫–æ–ª–ª–µ–∫—Ü–∏—é chats)."""
    if not (SEND_ACK_BANNER and TELEGRAM_API and httpx and chat_id):
        return False

    chats_ref = db.collection("chats").document(str(chat_id))

    @firestore.transactional
    def _ensure_welcomed(tx: firestore.Transaction) -> bool:
        snap = chats_ref.get(transaction=tx)
        if snap.exists and snap.to_dict().get("welcomed") is True:
            return False
        tx.set(chats_ref, {"welcomed": True}, merge=True)
        return True

    tx = db.transaction()
    should_send = False
    try:
        should_send = _ensure_welcomed(tx)
    except Exception as e:
        print("welcome flag error:", e)
        return False

    if not should_send:
        return False

    banner = (
        "üìö <b>BookSoul ‚Äî AI Soul Factory</b>\n"
        "–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç üëå –ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä–∫—É –∫–Ω–∏–≥–∏.\n"
        "–†–µ–¥–∞–∫—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à—É—é –º–∏–Ω—É—Ç—É."
    )
    try:
        await _tg_send_text(chat_id, banner)
        return True
    except Exception as e:
        print("telegram banner error:", e)
        return False


def _openai_client():
    if not OPENAI_API_KEY or OpenAI is None:
        _dlog("openai client skipped:", {"has_key": bool(OPENAI_API_KEY), "has_sdk": OpenAI is not None})
        return None
    try:
        client = OpenAI(api_key=OPENAI_API_KEY)
        _dlog("openai client ok")
        return client
    except Exception as e:
        print("OpenAI client init error:", e)
        return None


async def _router_answer(user_text: str) -> str:
    """
    –í—ã–∑–æ–≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ (GPT-5). –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è Telegram.
    –î–µ–ª–∞–µ—Ç –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤—ã–∑–æ–≤–∞: Responses API (–Ω–æ–≤—ã–π) –∏ Chat Completions (fallback).
    """
    if not OPENAI_API_KEY:
        _dlog("no OPENAI_API_KEY")
        return "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–∞—É–∑–∞: –ø–æ–¥–∫–ª—é—á–∞—é –º–æ–∑–≥. –ù–∞–ø–∏—à–∏ –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É."

    client = _openai_client()
    if client is None:
        _dlog("OpenAI client init failed")
        return "–í—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–∑–≥–æ–≤–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞. –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑ —á—É—Ç—å –ø–æ–∑–∂–µ."

    # –ü–æ–ø—ã—Ç–∫–∞ 1: Responses API (–Ω–æ–≤—ã–π —Å—Ç–∏–ª—å)
    try:
        _dlog("responses.create ->", {"model": OPENAI_MODEL, "len_user_text": len(user_text)})
        resp = client.responses.create(
            model=OPENAI_MODEL,
            input=[
                {"role": "system", "content": SYSTEM_PROMPT},
                {"role": "user", "content": user_text},
            ],
            temperature=0.2,
            max_output_tokens=600,
        )
        text = (getattr(resp, "output_text", "") or "").strip()
        _dlog("responses.create ok", {"len_answer": len(text)})
        if text:
            return text
        else:
            _dlog("responses.create empty_text")
    except Exception as e:
        _dlog("responses.create error", repr(e))

    # –ü–æ–ø—ã—Ç–∫–∞ 2: Chat Completions (fallback –Ω–∞ –±–æ–ª–µ–µ —Å—Ç–∞—Ä—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)
    try:
        _dlog("chat.completions.create ->", {"model": OPENAI_MODEL, "len_user_text": len(user_text)})
        ch = client.chat.completions.create(
            model=OPENAI_MODEL,
            messages=[
                {"role": "system", "content": SYSTEM_PROMPT},
                {"role": "user", "content": user_text},
            ],
            temperature=0.2,
            max_tokens=600,
        )
        c0 = ch.choices[0].message.content if ch and ch.choices else ""
        text = (c0 or "").strip()
        _dlog("chat.completions.create ok", {"len_answer": len(text)})
        if text:
            return text
        else:
            _dlog("chat.completions.create empty_text")
    except Exception as e:
        _dlog("chat.completions.create error", repr(e))

    return "–Ø –Ω–∞ —Å–≤—è–∑–∏, –Ω–æ —Å–µ–π—á–∞—Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–∫–Ω–æ. –ü–æ–≤—Ç–æ—Ä–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –º—ã—Å–ª—å ‚Äî –ø—Ä–æ–≤–µ—Ä—é —Ü–µ–ø–æ—á–∫—É."


async def _process_update(chat_id: int, update_id: int, user_text: str):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –Ω–∞ –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:
     - events: router_start
     - typing-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
     - –≤—ã–∑–æ–≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ (GPT-5)
     - –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ Telegram
     - events: router_sent
     - outbox.sent=true (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞)
    """

    out_id = f"{chat_id}:{update_id}"
    out_ref = db.collection("outbox").document(out_id)

    # –ï—Å–ª–∏ –º—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç update_id ‚Äî –≤—ã—Ö–æ–¥–∏–º
    try:
        snap = out_ref.get()
        if snap.exists and snap.to_dict().get("sent") is True:
            _dlog("outbox skip duplicate", out_id)
            return
    except Exception as e:
        print("outbox check error:", e)

    # –°–æ–±—ã—Ç–∏–µ: —Å—Ç–∞—Ä—Ç —Ä–æ—É—Ç–µ—Ä–∞
    try:
        db.collection("events").document(f"{out_id}:start").set({
            "type": "router_start",
            "chat_id": chat_id,
            "update_id": update_id,
            "user_text": user_text,
            "created_at": firestore.SERVER_TIMESTAMP,
            "stage": "router_start",
        }, merge=True)
    except Exception as e:
        print("events router_start error:", e)

    # –ó–∞–ø—É—Å–∫–∞–µ–º typing –Ω–∞ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç ACK)
    try:
        asyncio.create_task(_typing_loop(chat_id, TYPING_DURATION_SEC))
    except Exception as e:
        print("typing loop spawn error:", e)

    # –í—ã–∑–æ–≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞
    answer = await _router_answer(user_text)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
    try:
        await _tg_send_text(chat_id, answer)
    except Exception as e:
        print("telegram send error:", e)

    # –°–æ–±—ã—Ç–∏–µ: –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
    try:
        db.collection("events").document(f"{out_id}:sent").set({
            "type": "router_sent",
            "chat_id": chat_id,
            "update_id": update_id,
            "answer": answer,
            "created_at": firestore.SERVER_TIMESTAMP,
            "stage": "router_sent",
        }, merge=True)
    except Exception as e:
        print("events router_sent error:", e)

    # –û—Ç–º–µ—Ç–∫–∞ –≤ outbox
    try:
        out_ref.set({"sent": True, "sent_at": firestore.SERVER_TIMESTAMP}, merge=True)
    except Exception as e:
        print("outbox set error:", e)


# =================== –û–°–ù–û–í–ù–û–ô –•–≠–ù–î–õ–ï–† ===================

@app.post("/telegram_webhook")
async def telegram_webhook(req: Request):
    """
    –¶–µ–ø–æ—á–∫–∞:
      1) –ø—Ä–∏–Ω—è—Ç—å –∞–ø–¥–µ–π—Ç ‚Üí 2) –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å –≤ inbox ‚Üí 3) –±–∞–Ω–Ω–µ—Ä (–ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ) ‚Üí 4) –∑–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ ‚Üí 5) –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π 200 OK
    """
    # 0) –ü–∞—Ä—Å–∏–º –∞–ø–¥–µ–π—Ç
    try:
        payload = await req.json()
    except Exception:
        return JSONResponse({"ok": True, "ack": "ignored_non_json"})

    update_id = payload.get("update_id")
    message = payload.get("message") or payload.get("edited_message") or {}
    chat = message.get("chat") or {}
    chat_id = chat.get("id")
    user_text = (message.get("text") or "").strip()

    # 1) –ë–∞–∑–æ–≤–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    if not update_id or not chat_id:
        return JSONResponse({"ok": True, "ack": "ignored_missing_fields"})

    # 2) –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –≤ inbox: –∫–ª—é—á <chat_id>:<update_id>
    inbox_id = f"{chat_id}:{update_id}"
    inbox_ref = db.collection("inbox").document(inbox_id)

    @firestore.transactional
    def _create_inbox_once(tx: firestore.Transaction):
        snap = inbox_ref.get(transaction=tx)
        if snap.exists:
            return False
        now = datetime.now(timezone.utc)
        tx.set(inbox_ref, {
            "chat_id": chat_id,
            "update_id": update_id,
            "text": user_text,
            "raw": payload,  # –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –ø–æ–∑–∂–µ
            "created_at": firestore.SERVER_TIMESTAMP,
            "created_at_iso_utc": now.isoformat(),
            "created_at_epoch": int(time.time()),
            "status": "received",
            "source": "telegram",
        })
        return True

    tx = db.transaction()
    created = False
    try:
        created = _create_inbox_once(tx)
    except Exception as e:
        print("inbox write error:", e)

    # 3) –ñ—É—Ä–Ω–∞–ª –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è
    try:
        db.collection("events").document(inbox_id).set({
            "type": "incoming_message",
            "chat_id": chat_id,
            "update_id": update_id,
            "text": user_text,
            "source": "telegram",
            "created_at": firestore.SERVER_TIMESTAMP,
            "stage": "incoming",
        }, merge=True)
    except Exception as e:
        print("events incoming error:", e)

    # 4) –ë–∞–Ω–Ω–µ—Ä ‚Äî —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑ –Ω–∞ —á–∞—Ç (–µ—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω)
    try:
        await _send_banner_once(chat_id)
    except Exception as e:
        print("send_banner_once runtime error:", e)

    # 5) –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–¥–∏—Ä–µ–∫—Ç–æ—Ä + –æ—Ç–≤–µ—Ç) ‚Äî –ù–ï –±–ª–æ–∫–∏—Ä—É–µ—Ç ACK
    try:
        asyncio.create_task(_process_update(chat_id, update_id, user_text))
    except Exception as e:
        print("process_update spawn error:", e)

    # 6) –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π ACK –¥–ª—è Telegram ‚Äî —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ —Ä–µ—Ç—Ä–∞–µ–≤
    return JSONResponse({"ok": True, "inbox_created": created})
