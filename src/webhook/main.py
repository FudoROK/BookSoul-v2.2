# src/webhook/main.py
# BookSoul Webhook ‚Äî v2.3 (–ø—Ä–æ–¥-—è–¥—Ä–æ)
# 1) –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π 200 OK; –≤—Å–µ ¬´–≤—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–µ¬ª –¥–µ–π—Å—Ç–≤–∏—è ‚Äî –≤ —Ñ–æ–Ω–µ (create_task)
# 2) –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: –õ–û–ì–û–¢–ò–ü ‚Üí –±—Ä–µ–Ω–¥-—Ç–µ–∫—Å—Ç ‚Üí —Å–ª–æ–≥–∞–Ω (–æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ —á–∞—Ç)
# 3) –ú—è–≥–∫–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ—Å–ª–µ –ø–∞—É–∑—ã (>24h): ¬´–°–Ω–æ–≤–∞ –Ω–∞ —Å–≤—è–∑–∏ ‚ö°¬ª ‚Üí –ø–æ–ª–Ω—ã–π –±—Ä–µ–Ω–¥-–±–∞–Ω–Ω–µ—Ä
# 4) –ñ—É—Ä–Ω–∞–ª: incoming / router_start / router_sent / reconnect_banner / brand_banner / outbox_sent
# 5) –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: inbox (<chat_id>:<update_id>) / outbox (<chat_id>:<update_id>)
# 6) –î–∏—Ä–µ–∫—Ç–æ—Ä: Responses API ‚Üí fallback Chat Completions; –º–æ–¥–µ–ª—å –∏–∑ ENV (OPENAI_MODEL, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é gpt-4o)
# 7) typing –≤—ã–∫–ª—é—á–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é; —Å—Ç–∞—Ç–∏—á–Ω—ã–π ¬´–¥—É–º–∞—é‚Ä¶¬ª (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –±–µ–∑ –ø—Ä–∞–≤–æ–∫/–∞–Ω–∏–º–∞—Ü–∏–∏

from __future__ import annotations
import os, time, asyncio
from datetime import datetime, timezone, timedelta
from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse
from google.cloud import firestore

# --- HTTP –∫ Telegram ---
try:
    import httpx
except Exception:
    httpx = None

# --- OpenAI SDK ---
try:
    from openai import OpenAI
except Exception:
    OpenAI = None

app = FastAPI()
db = firestore.Client()  # ADC (Cloud Run SA)

# -------- ENV ----------
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "")
TELEGRAM_API = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}" if TELEGRAM_BOT_TOKEN else ""

# –õ–æ–≥–æ—Ç–∏–ø –¥–ª—è –±–∞–Ω–Ω–µ—Ä–∞: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º file_id (–±—ã—Å—Ç—Ä–µ–µ), –∏–Ω–∞—á–µ URL
LOGO_FILE_ID = os.getenv("LOGO_FILE_ID", "")      # –Ω–∞–ø—Ä–∏–º–µ—Ä: "AgACAgIAAxkBA..."
LOGO_URL = os.getenv("LOGO_URL", "")              # –Ω–∞–ø—Ä–∏–º–µ—Ä: "https://.../logo.png"

# –ë–∞–Ω–Ω–µ—Ä –≤–∫–ª—é—á—ë–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –§–û–ù–û–ú
SEND_ACK_BANNER = os.getenv("SEND_ACK_BANNER", "true").lower() == "true"

# ¬´–ú—è–≥–∫–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ—Å–ª–µ –ø–∞—É–∑—ã¬ª (—á–∞—Å—ã)
RECONNECT_HOURS = int(os.getenv("RECONNECT_HOURS", "24"))

# –°—Ç–∞—Ç–∏—á–Ω—ã–π —Å—Ç–∞—Ç—É—Å ¬´–¥—É–º–∞—é‚Ä¶¬ª (–±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏), –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Ñ–æ–Ω–æ–º –≤ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
THINKING_STATUS = os.getenv("THINKING_STATUS", "true").lower() == "true"
THINKING_TEXT = "BookSoul\nüìö –î—É–º–∞—é –Ω–∞–¥ –≤–∞—à–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º... ‚úèÔ∏è"

# typing (–∞–Ω–∏–º–∞—Ü–∏—è Telegram-–∫–ª–∏–µ–Ω—Ç–∞) ‚Äî –≤—ã–∫–ª—é—á–µ–Ω–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
TYPING_FEEDBACK = os.getenv("TYPING_FEEDBACK", "false").lower() == "true"
TYPING_DURATION_SEC = int(os.getenv("TYPING_DURATION_SEC", "8"))

# OpenAI
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-4o")
SYSTEM_PROMPT = (
    "You are the Director of BookSoul Factory. "
    "Answer briefly, helpfully, and specifically about making a custom children's book. "
    "If info is missing, ask one clear follow-up question. Keep it practical."
)

# Debug
DEBUG_ROUTER = os.getenv("DEBUG_ROUTER", "false").lower() == "true"
def _dlog(*args):
    if DEBUG_ROUTER:
        try: print("[router]", *args)
        except Exception: pass
# -----------------------

@app.get("/")
def health():
    return {"status": "ok", "service": "booksoul-webhook2"}

# ---------- Telegram helpers ----------

async def _tg_send_text(chat_id: int, text: str):
    if not (TELEGRAM_API and httpx): return
    async with httpx.AsyncClient(timeout=15) as client:
        r = await client.post(f"{TELEGRAM_API}/sendMessage", data={
            "chat_id": chat_id,
            "text": text,
            "parse_mode": "HTML",
            "disable_web_page_preview": True,
        })
        _dlog("sendMessage", r.status_code)
        r.raise_for_status()

async def _tg_send_photo(chat_id: int, caption: str | None = None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–æ—Ç–∏–ø–∞: —Å–Ω–∞—á–∞–ª–∞ file_id (–º–≥–Ω–æ–≤–µ–Ω–Ω–æ), –∑–∞—Ç–µ–º URL (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω)."""
    if not (TELEGRAM_API and httpx and chat_id): return False
    async with httpx.AsyncClient(timeout=15) as client:
        # 1) file_id
        if LOGO_FILE_ID:
            try:
                r = await client.post(f"{TELEGRAM_API}/sendPhoto", data={
                    "chat_id": chat_id,
                    "photo": LOGO_FILE_ID,
                    "caption": caption or "",
                    "parse_mode": "HTML",
                })
                if r.status_code == 200:
                    _dlog("sendPhoto(file_id)=200")
                    return True
            except Exception as e:
                _dlog("sendPhoto file_id error", repr(e))
        # 2) URL
        if LOGO_URL:
            try:
                r = await client.post(f"{TELEGRAM_API}/sendPhoto", data={
                    "chat_id": chat_id,
                    "photo": LOGO_URL,
                    "caption": caption or "",
                    "parse_mode": "HTML",
                })
                if r.status_code == 200:
                    _dlog("sendPhoto(url)=200")
                    return True
            except Exception as e:
                _dlog("sendPhoto url error", repr(e))
    return False

async def _tg_send_typing(chat_id: int):
    if not (TYPING_FEEDBACK and TELEGRAM_API and httpx): return
    try:
        async with httpx.AsyncClient(timeout=10) as client:
            await client.post(f"{TELEGRAM_API}/sendChatAction", data={"chat_id": chat_id, "action": "typing"})
    except Exception as e:
        _dlog("typing error", repr(e))

async def _typing_loop(chat_id: int, seconds: int):
    remaining = max(0, seconds)
    while remaining > 0:
        await _tg_send_typing(chat_id)
        await asyncio.sleep(4)
        remaining -= 4

# ---------- Chat profile / banners ----------

def _chat_ref(chat_id: int):
    return db.collection("chats").document(str(chat_id))

def _utcnow():
    return datetime.now(timezone.utc)

def _hours_ago(dt: datetime, hours: int) -> bool:
    try:
        return (_utcnow() - dt) > timedelta(hours=hours)
    except Exception:
        return True

def _get_chat_profile(chat_id: int) -> dict:
    try:
        snap = _chat_ref(chat_id).get()
        return snap.to_dict() if snap.exists else {}
    except Exception as e:
        _dlog("chat profile read error", repr(e))
        return {}

def _update_chat_profile(chat_id: int, **fields):
    try:
        _chat_ref(chat_id).set(fields, merge=True)
    except Exception as e:
        _dlog("chat profile write error", repr(e))

def _should_reconnect_banner(p: dict) -> bool:
    # last_message_at -> –µ—Å–ª–∏ –ø–∞—É–∑–∞ > RECONNECT_HOURS ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º ¬´–°–Ω–æ–≤–∞ –Ω–∞ —Å–≤—è–∑–∏ ‚ö°¬ª + –±—Ä–µ–Ω–¥-–±–∞–Ω–Ω–µ—Ä
    last_at = p.get("last_message_at_iso")
    if not last_at: return False
    try:
        dt = datetime.fromisoformat(last_at)
    except Exception:
        return False
    return _hours_ago(dt, RECONNECT_HOURS)

async def _send_brand_banner(chat_id: int):
    """
    –ü–æ–ª–Ω—ã–π –±—Ä–µ–Ω–¥-–±–∞–Ω–Ω–µ—Ä:
     1) –ª–æ–≥–æ—Ç–∏–ø (photo)
     2) –±—Ä–µ–Ω–¥-—Ç–µ–∫—Å—Ç
     3) —Å–ª–æ–≥–∞–Ω
    """
    # 1) –ª–æ–≥–æ—Ç–∏–ø
    await _tg_send_photo(chat_id)

    # 2) –±—Ä–µ–Ω–¥-—Ç–µ–∫—Å—Ç (—Ü–≤–µ—Ç–∞ –≤ –¢–µ–ª–µ–≥—Ä–∞–º-—Ç–µ–∫—Å—Ç–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è ‚Äî —Ü–≤–µ—Ç –≤ –ª–æ–≥–æ—Ç–∏–ø–µ)
    brand_text = (
        "<b>BookSoul</b> ‚Äî <b>AI Soul</b> <b>Fabrica</b>\n"
        "‚ú® <i>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–∞—Ä—è—Ç –≤—Ä–µ–º—è</i> ‚ú®"
    )
    await _tg_send_text(chat_id, brand_text)

    # –∂—É—Ä–Ω–∞–ª
    try:
        db.collection("events").add({
            "type": "brand_banner",
            "chat_id": chat_id,
            "created_at": firestore.SERVER_TIMESTAMP,
            "stage": "brand_banner",
        })
    except Exception as e:
        _dlog("events brand_banner error", repr(e))

async def _send_reconnect_then_brand(chat_id: int):
    # 1) –∫–æ—Ä–æ—Ç–∫–æ–µ ¬´–°–Ω–æ–≤–∞ –Ω–∞ —Å–≤—è–∑–∏ ‚ö°¬ª
    try:
        await _tg_send_text(chat_id, "–°–Ω–æ–≤–∞ –Ω–∞ —Å–≤—è–∑–∏ ‚ö°")
        db.collection("events").add({
            "type": "reconnect_banner",
            "chat_id": chat_id,
            "created_at": firestore.SERVER_TIMESTAMP,
            "stage": "reconnect_banner",
        })
    except Exception as e:
        _dlog("events reconnect_banner error", repr(e))
    # 2) —Å—Ä–∞–∑—É –ø–æ–ª–Ω—ã–π –±—Ä–µ–Ω–¥-–±–∞–Ω–Ω–µ—Ä
    await _send_brand_banner(chat_id)
    # –æ—Ç–º–µ—Ç–∏–º –º–æ–º–µ–Ω—Ç –ø–æ–∫–∞–∑–∞ –±–∞–Ω–Ω–µ—Ä–∞
    _update_chat_profile(chat_id, last_brand_banner_at_iso=_utcnow().isoformat())

async def _maybe_send_first_or_reconnect_banner(chat_id: int):
    """
    - –µ—Å–ª–∏ —á–∞—Ç–∞ –Ω–µ—Ç ‚Üí –ø–µ—Ä–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ (–ø–æ–ª–Ω—ã–π –±–∞–Ω–Ω–µ—Ä), welcomed=true
    - –µ—Å–ª–∏ –µ—Å—Ç—å –∏ –ø–∞—É–∑–∞ > 24h ‚Üí ¬´–°–Ω–æ–≤–∞ –Ω–∞ —Å–≤—è–∑–∏ ‚ö°¬ª ‚Üí –ø–æ–ª–Ω—ã–π –±–∞–Ω–Ω–µ—Ä (—Ä–∞–∑ –≤ 24h)
    - –≤—Å—ë —Ñ–æ–Ω–æ–º; –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç ACK
    """
    # —á–∏—Ç–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    profile = _get_chat_profile(chat_id)

    # –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ–æ–±—â–µ (–Ω–µ—Ç greeted)
    if not profile or profile.get("greeted") is not True:
        # –ø–æ–ª–Ω—ã–π –±–∞–Ω–Ω–µ—Ä
        await _send_brand_banner(chat_id)
        _update_chat_profile(chat_id, greeted=True, first_seen_at_iso=_utcnow().isoformat(),
                             last_brand_banner_at_iso=_utcnow().isoformat())
        return

    # ¬´–º—è–≥–∫–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ—Å–ª–µ –ø–∞—É–∑—ã¬ª
    if _should_reconnect_banner(profile):
        # –∞–Ω—Ç–∏—Å–ø–∞–º: –Ω–µ —á–∞—â–µ —Ä–∞–∑–∞ –≤ 24 —á–∞—Å–∞
        last_brand_iso = profile.get("last_brand_banner_at_iso")
        if last_brand_iso:
            try:
                if not _hours_ago(datetime.fromisoformat(last_brand_iso), 24):
                    return
            except Exception:
                pass
        await _send_reconnect_then_brand(chat_id)

# ---------- OpenAI ----------

def _openai_client():
    if not OPENAI_API_KEY or OpenAI is None:
        _dlog("openai client skipped", {"key": bool(OPENAI_API_KEY), "sdk": OpenAI is not None})
        return None
    try:
        return OpenAI(api_key=OPENAI_API_KEY)
    except Exception as e:
        _dlog("OpenAI init error", repr(e))
        return None

async def _router_answer(user_text: str) -> str:
    if not OPENAI_API_KEY:
        return "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–∞—É–∑–∞: –ø–æ–¥–∫–ª—é—á–∞—é –º–æ–∑–≥. –ù–∞–ø–∏—à–∏ –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É."
    client = _openai_client()
    if client is None:
        return "–í—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–∑–≥–æ–≤–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞. –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑ —á—É—Ç—å –ø–æ–∑–∂–µ."

    # 1) Responses API
    try:
        _dlog("responses.create", {"model": OPENAI_MODEL, "len": len(user_text)})
        resp = client.responses.create(
            model=OPENAI_MODEL,
            input=[
                {"role": "system", "content": SYSTEM_PROMPT},
                {"role": "user", "content": user_text},
            ],
            temperature=0.2,
            max_output_tokens=600,
        )
        text = (getattr(resp, "output_text", "") or "").strip()
        if text: return text
        _dlog("responses empty")
    except Exception as e:
        _dlog("responses error", repr(e))

    # 2) Chat Completions (fallback)
    try:
        _dlog("chat.completions.create", {"model": OPENAI_MODEL})
        ch = client.chat.completions.create(
            model=OPENAI_MODEL,
            messages=[
                {"role": "system", "content": SYSTEM_PROMPT},
                {"role": "user", "content": user_text},
            ],
            temperature=0.2,
            max_tokens=600,
        )
        c0 = ch.choices[0].message.content if ch and ch.choices else ""
        text = (c0 or "").strip()
        if text: return text
        _dlog("chat empty")
    except Exception as e:
        _dlog("chat error", repr(e))

    return "–Ø –Ω–∞ —Å–≤—è–∑–∏, –Ω–æ —Å–µ–π—á–∞—Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–∫–Ω–æ. –ü–æ–≤—Ç–æ—Ä–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –º—ã—Å–ª—å ‚Äî –ø—Ä–æ–≤–µ—Ä—é —Ü–µ–ø–æ—á–∫—É."

# ---------- Processing pipeline ----------

async def _send_thinking_status(chat_id: int):
    if not THINKING_STATUS: return
    try:
        await _tg_send_text(chat_id, THINKING_TEXT)
    except Exception as e:
        _dlog("thinking status error", repr(e))

async def _process_update(chat_id: int, update_id: int, user_text: str):
    out_id = f"{chat_id}:{update_id}"
    out_ref = db.collection("outbox").document(out_id)

    # –µ—Å–ª–∏ —É–∂–µ –æ—Ç–≤–µ—á–∞–ª–∏ ‚Äî –≤—ã—Ö–æ–¥–∏–º
    try:
        snap = out_ref.get()
        if snap.exists and snap.to_dict().get("sent") is True:
            _dlog("outbox skip", out_id)
            return
    except Exception as e:
        _dlog("outbox check error", repr(e))

    # –∂—É—Ä–Ω–∞–ª: —Å—Ç–∞—Ä—Ç —Ä–æ—É—Ç–µ—Ä–∞
    try:
        db.collection("events").document(f"{out_id}:start").set({
            "type": "router_start",
            "chat_id": chat_id,
            "update_id": update_id,
            "user_text": user_text,
            "created_at": firestore.SERVER_TIMESTAMP,
            "stage": "router_start",
        }, merge=True)
    except Exception as e:
        _dlog("events router_start error", repr(e))

    # —Å—Ç–∞—Ç–∏—á–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ–∂–∏–¥–∞–Ω–∏—è (–±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏)
    asyncio.create_task(_send_thinking_status(chat_id))

    # –ø–æ –∂–µ–ª–∞–Ω–∏—é: typing (–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∞ –±—É–¥—É—â–µ–µ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–∫–ª—é—á–µ–Ω–æ)
    if TYPING_FEEDBACK:
        asyncio.create_task(_typing_loop(chat_id, TYPING_DURATION_SEC))

    # –æ—Ç–≤–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞
    answer = await _router_answer(user_text)

    # –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
    try:
        await _tg_send_text(chat_id, answer)
    except Exception as e:
        _dlog("telegram send error", repr(e))

    # –∂—É—Ä–Ω–∞–ª: –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
    try:
        db.collection("events").document(f"{out_id}:sent").set({
            "type": "router_sent",
            "chat_id": chat_id,
            "update_id": update_id,
            "answer": answer,
            "created_at": firestore.SERVER_TIMESTAMP,
            "stage": "router_sent",
        }, merge=True)
    except Exception as e:
        _dlog("events router_sent error", repr(e))

    # –æ—Ç–º–µ—Ç–∫–∞ –≤ outbox
    try:
        out_ref.set({"sent": True, "sent_at": firestore.SERVER_TIMESTAMP}, merge=True)
    except Exception as e:
        _dlog("outbox set error", repr(e))

# ---------- Webhook handler ----------

@app.post("/telegram_webhook")
async def telegram_webhook(req: Request):
    # 0) –ø–∞—Ä—Å–∏–º –∞–ø–¥–µ–π—Ç
    try:
        payload = await req.json()
    except Exception:
        return JSONResponse({"ok": True, "ack": "ignored_non_json"})

    update_id = payload.get("update_id")
    message = payload.get("message") or payload.get("edited_message") or {}
    chat = message.get("chat") or {}
    chat_id = chat.get("id")
    user_text = (message.get("text") or "").strip()

    # 1) —Ñ–∏–ª—å—Ç—Ä
    if not update_id or not chat_id:
        return JSONResponse({"ok": True, "ack": "ignored_missing_fields"})

    # 2) inbox (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ)
    inbox_id = f"{chat_id}:{update_id}"
    inbox_ref = db.collection("inbox").document(inbox_id)

    @firestore.transactional
    def _create_inbox_once(tx: firestore.Transaction):
        snap = inbox_ref.get(transaction=tx)
        if snap.exists: return False
        now = datetime.now(timezone.utc)
        tx.set(inbox_ref, {
            "chat_id": chat_id,
            "update_id": update_id,
            "text": user_text,
            "raw": payload,  # –º–æ–∂–Ω–æ –≤—ã–∫–ª—é—á–∏—Ç—å –ø–æ–∑–∂–µ
            "created_at": firestore.SERVER_TIMESTAMP,
            "created_at_iso_utc": now.isoformat(),
            "created_at_epoch": int(time.time()),
            "status": "received",
            "source": "telegram",
        })
        return True

    tx = db.transaction()
    created = False
    try:
        created = _create_inbox_once(tx)
    except Exception as e:
        _dlog("inbox write error", repr(e))

    # 3) –∂—É—Ä–Ω–∞–ª –≤—Ö–æ–¥—è—â–µ–≥–æ
    try:
        db.collection("events").document(inbox_id).set({
            "type": "incoming_message",
            "chat_id": chat_id,
            "update_id": update_id,
            "text": user_text,
            "source": "telegram",
            "created_at": firestore.SERVER_TIMESTAMP,
            "stage": "incoming",
        }, merge=True)
    except Exception as e:
        _dlog("events incoming error", repr(e))

    # 4) –æ–±–Ω–æ–≤–∏–º –ø—Ä–æ—Ñ–∏–ª—å —á–∞—Ç–∞ (last_message_at)
    _update_chat_profile(chat_id, last_message_at_iso=_utcnow().isoformat())

    # 5) –ë–ê–ù–ù–ï–†–´ / –ü–†–ò–í–ï–¢–°–¢–í–ò–Ø ‚Äî –°–¢–†–û–ì–û –§–û–ù–û–ú
    if SEND_ACK_BANNER:
        asyncio.create_task(_maybe_send_first_or_reconnect_banner(chat_id))

    # 6) –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É (–¥–∏—Ä–µ–∫—Ç–æ—Ä ‚Üí –æ—Ç–≤–µ—Ç)
    asyncio.create_task(_process_update(chat_id, update_id, user_text))

    # 7) –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π ACK
    return JSONResponse({"ok": True, "inbox_created": created})
